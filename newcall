#!/bin/bash

# Created by Jeffrey Shepherd (https://hummdis.com).

#   .------..------..------..------..------..------..------.
#   |H.--. ||U.--. ||M.--. ||M.--. ||D.--. ||I.--. ||S.--. |
#   | :/\: || (\/) || (\/) || (\/) || :/\: || (\/) || :/\: |
#   | (__) || :\/: || :\/: || :\/: || (__) || :\/: || :\/: |
#   | '--'H|| '--'U|| '--'M|| '--'M|| '--'D|| '--'I|| '--'S|
#   `------'`------'`------'`------'`------'`------'`------'

# This work is licensed under the Creative Commons Attribution-ShareAlike  
# 4.0 International License. To view a copy of this license,
# visit http://creativecommons.org/licenses/by-sa/4.0/.

# VARS

# To be implemented with a version check in the future.
readonly VERSION="1.9.5"

readonly RUN_PATH=~/bin
readonly TEMP_DIR=/tmp/$(whoami)
readonly WHOIS_DATA=~/tmp/.whois.data
readonly TUCOWS_DATA=~/tmp/.tucows.whois.data
readonly LAST_DNS_FILE=~/bin/.last_dns
readonly COLOR_FILE=~/.newcall_colors

# We run this query so many times, why not just do it once, set it and forget it?
# This may result in an overall reduction in time to run this script.
# We initialize it here and it gets called later in the 'dig_once' function
# after we've set the $DNS_SERVER. -AlexKr
DIG_SHORT=''

# Formatting Vars
### COLORS ###
# If the customize file exists, use the colors there.
if test -f $COLOR_FILE; then
    source $COLOR_FILE
else
    readonly ALERT=$(echo -en '\033[1;31m')    # Bold Red
    readonly WARN=$(echo -en '\033[1;33m')     # Bold Yellow
    readonly HEAD=$(echo -en '\033[38;5;117m') # Blue
    readonly COOL=$(echo -en '\033[32m')       # Green
    readonly INFO=$(echo -en '\033[38;5;111m') # Light Blue
    readonly HIL1=$(echo -en '\033[36m')       # Cyan
    readonly HIL2=$(echo -en '\033[35m')       # Magenta
    readonly WHT=$(echo -en '\033[01;7m')      # Bold White Text
    readonly TITLE=$(echo -en '\033[44m')      # Blue Background
    readonly ULNE=$(echo -en '\033[4m')        # Underline
fi
# This cannot be changed/customized by the color file
readonly NC=$(echo -en '\033[0m')              # Reset to normal TTY

# These are just place holders. They may be set/reset elsewhere as they're defined here
# because they should not be blank when the script is actually running.
USER_DOMAIN=''  # User-provided domain.
FDOMAIN=''      # Formatted domain
DNS_SERVER=''   # DNS server.
FDNS_SERVER=''  # Formatted DNS server.
DNS=''          # Used in loop.
SERVER=''       # Used in propagation check.


# DNS Servers
# Worldwide Public DNS servers.
# Worldwide servers only used for DNS propagation checking. Using the var  
# name will not allow them to work. Only if the IP is entered.
# The default MUST be a truly public server as using a private server, like
# InMotion Hosting or any other non-public DNS server, because it fails if 
# the site is not hosted with that DNS server owner.
IMH='74.124.210.242'   # InMotion Hosting
RES='216.194.168.112'  # IMH Reseller DNS Servers
HUB='173.205.127.4'    # Web Hosting Hub DNS
GOOG='8.8.4.4'         # Google Public DNS
CF='1.0.0.1'           # Cloudflare Public DNS
L3='209.244.0.3'       # Level3 DNS
QUAD='9.9.9.9'         # Quad9 DNS
Q9BL='9.9.9.10'        # Quad9 No Blocks DNS --DEFAULT--
OPEN='208.67.222.222'  # OpenDNS (Oracle)
NIC='172.98.193.42'    # OpenNIC (USA)
VERI='64.6.64.6'       # Verisign DNS (UltraDNS)
NORT='199.85.127.10'   # Norton ConnectSafe DNS
COMO='8.20.247.20'     # Comodo Secure DNS
W1='51.254.25.115'     # OpenNIC (Czech Republic)
W2='202.134.52.105'    # PhillipCapital (India)
W3='41.57.125.214'     # Zarnet (Zimbabwe)
W4='190.111.246.169'   # CPS (Argentina)
W5='202.158.38.162'    # PT Cyberindo (Indonesia)
W6='41.217.204.165'    # Layer3 (Nigeria)
W7='45.71.185.100'     # OpenNIC (Ecuador)
W8='87.98.175.85'      # OpenNIC (France)
W9='51.89.88.66'       # OpenNIC (Germany)
W10='172.105.220.183'  # OpenNIC (Japan)
W11='103.53.197.218'   # NewMedia (Singapore)
W12='203.2.193.67'     # UUNET (Australia)
W13='37.235.1.177'     # ANEXIA Internetdienstleistungs (Austria)
W14='172.98.193.42'    # OpenNIC (BackplaneDNS)
W15='58.27.149.60'     # OpenNIC (Pakistan)
W16='91.217.137.37'    # OpenNIC (Russia)

## End VARS

# FUNCTIONS
usage() {
    cat <<- EOF 
    Newcall DNS Lookup Tool - v${VERSION}

    Usage: newcall <domain> [dns | ..OPTIONS..]

    <domain> - ${WHT}Required${NC} - This is the TLD to search.

    [dns]    - (Optional) The DNS server to be used.
    Built-In Public DNS Options include:
        imh | int : InMotion Hosting DNS Server
        res       : InMotion Reseller DNS
        hub       : Web Hosting Hub DNS
        cf        : Cloudflare Public DNS
        goog      : Google Public DNS
        open      : OpenDNS Public DNS
        quad      : Quad9 Public DNS
        q9bl      : Quad9 Public DNS (No block access) --DEFAULT--
        l3        : Level3 Public DNS
        nic       : OpenNIC Public DNS
        veri      : Verisign Public DNS
        nort      : Norton ConnectSafe
        como      : Comodo Secure DNS
        -OR- Any manually entered ${HIL1}IPv4${NC} for a public DNS server.

    [OPTIONS] To be used in place of a DNS server.

    prop   This will run a DNS propagation test for the SOA record
           and display the result from each of the built-in DNS servers as well
           as a check of additional worldwide DNS servers for full propagation.
           This check will first obtain the SOA from the authoritative name
           server for the given domain, then compare it with the full list of
           DNS servers. A summary at the end will report how many matches are
           found.
           NOTE: Using the 'prop' option ${ULNE}will${NC} test
           international servers.
    
    a:     Display the 'A' record only.
    
    mx:    This will run a check for MX records only using the
           default DNS servers.
    
    ns:    This will run a check of the NS records from WHOIS
           using the default DNS servers.
    
    spf:   This will run a check for SPF records.
    
    ptr:   This will return the PTR for the given domain.
    
    arin:  This runs an ARIN check on the 'A' record of the domain.
    
    dmarc: This will run a check for DMARC records.
    
    dkim:  This will run a check for DKIM records.
    
    spam:  This will check NS, PTR, MX, SPF and DMARC for causes for
           being marked as SPAM or being blacklisted.  If this argument is
           passed with others, this is the only one that will run.
    
    caa:   Perform a CAA check to ensure that the SSL being issued can be done
           by the CA that's issuing the SSL.
    
    ssl:   Run a setup of standard tasks for installation of SSL certificates,
           as well as running a CAA check. If this argument is passed with
           others it will be the only one that runs.
    
    whois: Provides and extended output of WHOIS data.  It's not the full WHOIS,
           just additional informaiton provided over the default test.
    
    whoisfull: This will perform a full 'whois' lookup of the domain. If this
           argument is passed with others, it will be the only one that runs.
    
    reg -or-
    isus -or-
    tucows: These three options will all trigger the Registrar lookup process to see where a
            domain is registered.
    
    update: This will update the Newcall script to the latest version available.

    redirect: This will perform a redirect check on the provided domain.

    EXAMPLES: newcall hummdis.com
              newcall hummdis.com veri
              newcall hummdis.com 8.8.4.4
              newcall hummdis.com ns mx spf dmarc
              newcall hummdis.com spam

    Created by Jeffrey Shepherd (https://hummdis.com).
    This work is licensed under the Creative Commons Attribution-ShareAlike  
    4.0 International License. To view a copy of this license,
    visit http://creativecommons.org/licenses/by-sa/4.0/.
EOF
}

default_search() {
    # For informational purposes, tell the user what DNS server we're using.
    clear # Clear the screen when running this operation.
    echo -e "${TITLE}Using $FDNS_SERVER${TITLE} (${DNS_SERVER}) DNS Server for results.${NC}\n"

    # Set the whois data
    set_whois

    # By default, we'll check IP, Host, MX, and SOA.
    ip_search
    ns_check
    ptr_search
    soa_search
    arin_search
    mx_search
    whois_search

    echo ""
    echo -n "${COOL}Checks completed for${NC} $FDOMAIN ${COOL}on: "
        date
    echo "${NC}"
    # We're done. Don't allow the default_search to be stacked.
    exit 0
}

set_default_dns() {
    # To prevent our IPs from being blocked due to too many queries, automatically
    # rotate between the largest DNS providers so that we're not hitting a single
    # provider too many times.
    # Rotate between Google Public DNS, Cloudflare, Level3, Quad9, OpenDNS,
    # OpenNIC, Verisign, Norton ConnectSafe DNS and Comodo Secure DNS.
    if test -f $LAST_DNS_FILE; then
        LAST_DNS=$(cat $LAST_DNS_FILE)
    else
        touch $LAST_DNS_FILE
        LAST_DNS=0
    fi
    LAST_DNS=$((LAST_DNS+1))
    NEXT_DNS=$LAST_DNS
    
    # Make sure we don't go above #9. If so, start over.
    if [ $NEXT_DNS -gt 9 ]; then
        LAST_DNS=1
        NEXT_DNS=1
    fi
    
    case $NEXT_DNS in
        1)  # Google Public DNS
            DEFDNS=$GOOG
            ;;
        2)  # Cloudflare Public DNS
            DEFDNS=$CF
            ;;
        3)  # Level 3 DNS
            DEFDNS=$L3
            ;;
        4)  # Quad9 DNS
            DEFDNS=$QUAD
            ;;
        5)  # OpenDNS (Oracle)
            DEFDNS=$OPEN
            ;;
        6)  # OpenNIC
            DEFDNS=$NIC
            ;;
        7)  # Verisign DNS
            DEFDNS=$VERI
            ;;
        8)  # Norton ConnectSafe DNS
            DEFDNS=$NORT
            ;;
        9)  # Comodo Secure DNS
            DEFDNS=$COMO
            ;;
        *)  # InMotion Hosting Main DNS
            DEFDNS=$IMH
            ;;
    esac
    
    echo "${LAST_DNS}" > $LAST_DNS_FILE
}

set_whois() {
    # Determines the correct WHOIS lookup based on the TLD of the domain. This increases the reply success rate.
    # Provided by Jamie P.
    # Make sure our local temp directory exists.
    if [[ ! -e ~/tmp ]]; then
        mkdir ~/tmp
    fi
    # Set the WHOIS server to use and save the WHOIS data.
    # Note: whois-servers.net only supports .com, .net, and .edu domains.
    TLD=$(echo ${DOMAIN} | awk -F. '{print $NF}')
    case $TLD in
        com | net | edu)
            WHOIS_SERV=$(echo ${DOMAIN} | awk -F. '{print $NF}').whois-servers.net
            ;;
        *)
            WHOIS_SERV=$(whois -f -h whois.iana.org ${DOMAIN} | egrep -i "redirected to|refer" | head -1 | awk '{print $2}')
            ;;
    esac

    # Set the WHOIS information to a file and we'll read from there from now on.
    whois -f -d -h ${WHOIS_SERV} ${DOMAIN} > ${WHOIS_DATA}

    # We need to verify the domain actually exists. If not, don't bother with the rest of the tool.
    # Report the error and exit.  Error is appears as:
    # No match for "DOMAIN.COM".
    # Credit: David B.
    MATCH_DOMAIN=$(echo ${DOMAIN} | tr [:lower:] [:upper:])
    WHOIS_CHECK=$(cat ${WHOIS_DATA} | grep "No match for \"${MATCH_DOMAIN}\".")
    if [[ ! -z $WHOIS_CHECK ]]; then
        echo -e "WHOIS Response: ${ALERT}${WHOIS_CHECK}${NC}"
        echo -e "${WARN}Check domain regsitration status.${NC}"
        exit 1
    fi
}

whois_search() {
    # WHOIS information - Quick Look
    echo "${HEAD}WHOIS${NC} for ${FDOMAIN}:"
    TLD=$(echo ${DOMAIN} | awk -F. '{print $NF}')
    if [[ $TLD == "sa" ]]; then
        echo -e "    ${INFO}Run 'newcall $DOMAIN whoisfull'${DEF}"
    else
        cat $WHOIS_DATA | grep -i 'Date:\|Status:\|Registrar:\|DNSSEC' | sed -e 's/^[ \t]*//' | sed 's/^/    /'
        CLIENT_HOLD=$(cat $WHOIS_DATA | grep -i 'clientHold')
        if [ ! -z "${CLIENT_HOLD}" ]; then
            echo -e "\n${ALERT}${ULNE}*!*!* DOMAIN ON CLIENT HOLD *!*!*${NC}\n" | sed 's/^/    /'
        fi
        DNSSEC=$(cat $WHOIS_DATA | egrep -i 'DNSSEC DS Data|DNSSEC: Yes')
        if [ ! -z "${DNSSEC}" ]; then
            echo -e "\n${WARN}${ULNE}\!/ WARNING - DNSSEC enabled at registrar.${NC}\n" | sed 's/^/    /'
        fi

        reg_check
    fi
}

whois_expanded() {
    # WHOIS information - Expanded Look
    set_whois
    echo "${HEAD}WHOIS Expanded${NC} for ${FDOMAIN}:"
    cat $WHOIS_DATA | grep -i 'Date\|Expir\|Server\|Status\|DNSSEC\|Registrar\|Email' | sed -e 's/^[ \t]*//' | sed 's/^/    /'
    reg_check
}

whois_full() {
    # WHOIS information - Full Look
    set_whois
    echo "${HEAD}WHOIS Full${NC} for ${FDOMAIN}:"
    cat $WHOIS_DATA
    reg_check
    # We're done. Don't allow 'whois_full' to be stacked.
    exit 0
}

reg_check() {
    # Perform lookup on Tucows servers to see if InMotion Hosting is the registrar.
    # Updated Regex code per Nick P.
    echo "${HEAD}Registrar Check${NC} for ${FDOMAIN}:"
    # Before we do this, make sure it's a domain that InMotion Hosting can register,
    # which are only: .com, .net, .org, .biz, .info and .us.  All others can't be registered with us.
    # If it is one of those, then make sure Tucows actually is the registrar, otherwise, don't bother.
    case $(echo ${DOMAIN} | awk -F. '{print $NF}') in
        com | net | org | biz | us) # Matches
            if [[ ! -z $(grep -i "Registrar: TUCOWS" $WHOIS_DATA) ]]; then
                echo > $TUCOWS_DATA
                whois -f -h whois.tucows.com $DOMAIN >> $TUCOWS_DATA 2>&1
                ISUS=$(grep -i "Reseller: " $TUCOWS_DATA | cut -d: -f 2 | tr [:upper:] [:lower:])
                if [[ $ISUS = *"inmotion hosting"* ]]; then
                    echo "${HIL2}REGISTERED HERE!${NC} - IMH - OK to transfer to Customer Service" | sed 's/^/    /'
                elif [[ $ISUS = *"web hosting hub"* ]]; then
                    echo "${HIL2}REGISTERED HERE!${NC} - HUB - OK to transfer to Customer Service" | sed 's/^/    /'
                else
                    echo "${WARN}Not Registered Here${NC} - Must contact $ISUS" | sed 's/^/    /'
                fi
            else
                echo "${WARN}Not Registered Here${NC} - Must contact $(cat $WHOIS_DATA | grep -i 'registrar:' | cut -d : -f 2 | sed -e 's/^[ \t]*//')" | sed 's/^/    /'
            fi
            ;;
        *) # No match
            echo "${WARN}Not Registered Here${NC} - Must contact $(cat $WHOIS_DATA | grep -i 'registrar:' | cut -d : -f 2 | sed -e 's/^[ \t]*//')" | sed 's/^/    /'
            ;;
    esac
}

ip_search() {
    # IP information.
    echo "${HEAD}IP${NC} (DNS A Record) for ${FDOMAIN}:"
    #echo "${DIG_SHORT}" | sed 's/^/    /' # Use DIG_SHORT var instead of running dig again. -AlexKr
    # Bug - This breaks the ability to use Newcall to query just the "A" record with the "a" argument.
    # Therefore, DIG must be called again to ensure full functionality. Plus, since this is all the
    # user is asking to be done, the script does 1 `dig` command either way.
    dig @$DNS_SERVER $DOMAIN +short | sed 's/^/    /'
}

ptr_search () {
    # Host information
    echo "${HEAD}PTR Record(s)${NC} for ${FDOMAIN}:"
    for ip in ${DIG_SHORT}; do
        host ${ip} | sed 's/^/    /'
    done
}

soa_search() {
    # SOA information
    echo "${HEAD}SOA Record${NC} for ${FDOMAIN}:"
    dig @$DNS_SERVER $DOMAIN SOA +short | sed 's/^/    /'
}

mx_search () {
    # MX information
    echo "${HEAD}MX Records${NC} for ${FDOMAIN}:"
    MX=$(dig @$DNS_SERVER $DOMAIN MX +short) # Used for Google Workspace test later.
    # echo "DEBUG: MX var = $MX"
    echo -n "${MX}" | sort -n | sed 's/^/    /' # Why not re-use the 'MX' var instead of running dig mx again? -AlexKr

    echo "${HEAD}Primary MX Record IP${NC} for ${FDOMAIN}:"
    # Just get the IP for the primary MX record that's returned,
    # that is the lowest number (highest priority) returned.
    IP=$(echo "${MX}" | sort -n | awk '{ print $2; exit }' | dig +short -f - | head -1) # Same deal, let's re-use 'MX'
    if [ ! -z "${IP}" ]; then
        echo "    $IP"
        # Report the owner of the first MX record IP address, if we can get it.
        # This way, we know who hosts the email if it can't be identified by the MX record itself.
        NETNAME=$(whois -f -d $IP | grep -i 'NetName' | sed 's/^/    /')
        if [ ! -z "${NETNAME}" ]; then
            echo "$NETNAME"
        fi
        # Also report the PTR, just in case.
        dig -x $IP +short 2>/dev/null | sed 's/^/    /'
    fi
    if [[ $MX = *"google.com"* ]]; then
        G_SUITE='true'
    else
        G_SUITE='false'
    fi
}

arin_search() {
    # This performs an ARIN check on the domain given.
    echo "${HEAD}ARIN${NC} for ${FDOMAIN} ${HIL1}($(echo $DIG_SHORT | tail -n 1))${NC}:"
    whois -f -d $(echo $DIG_SHORT | tail -n 1) | grep -i 'NetName\|NetRange\|CIDR\|Organization\|City\|Country' | sed 's/^/    /'
}

ns_check() {
    # This performs the NS check for a given domain.
    echo "${HEAD}Name Servers${NC} for ${FDOMAIN}:"
    DIG_RESULTS=$(dig $DEFDNS $DOMAIN NS +short | sort -n)
    D_NS1=$(echo $DIG_RESULTS | awk '{print $1}' | sed -e 's/\.$//')
    D_NS2=$(echo $DIG_RESULTS | awk '{print $2}' | sed -e 's/\.$//')
    W_NS1=$(grep -m 1 -i 'name server' $WHOIS_DATA | awk '{print $3}' | tr '\r' ' ')
    # If W_NS1 is blank, then this registrar must put each NS on a new line. >:(
    if [[ -z $W_NS1 ]]; then
        NS_DATA=$(grep -A 2 -i 'name server' $WHOIS_DATA | cut -d: -f2 | tr '\n' ' ' | tr -cd '[:print:]')
        W_NS1=$(echo $NS_DATA | awk '{print $1}')
        W_NS2=$(echo $NS_DATA | awk '{print $2}')
    else
        W_NS2=$(grep -v $W_NS1 $WHOIS_DATA | grep -m 1 -i 'name server' | awk '{print $3}' | tr '\r' ' ')
    fi
    W_NS1=$(echo $W_NS1 | tr [:upper:] [:lower:])
    W_NS2=$(echo $W_NS2 | tr [:upper:] [:lower:])
    W_NS1=${W_NS1//[^[:ascii:]]/}
    W_NS2=${W_NS2//[^[:ascii:]]/}
    echo -e "  DIG NS results:\n    $D_NS1\n    $D_NS2"
    echo -e "  WHOIS NS results:\n    $W_NS1\n    $W_NS2"
    if [ \( "$D_NS1" != "$W_NS1" \) -a \( "$D_NS1" != "$W_NS2" \) ] &&  [ \( "$D_NS2" != "$W_NS1" \) -a \( "$D_NS2" != "$W_NS2" \) ]; then
        echo "  ${WARN}Warning: Name Server Mismatch${NC} - Registrar & Server do not match!"
    fi
}

spf_check() {
    # Find the SPF records and print what's found.
    echo "${HEAD}SPF${NC} for ${FDOMAIN}:"
    dig @$DNS_SERVER $DOMAIN TXT | grep 'v=spf' | sed 's/^/    /'
}

dkim_check() {
    # See if there is a DKIM record for the domain.
    echo "${HEAD}DKIM${NC} for ${FDOMAIN}:"
    MX=$(dig @$DNS_SERVER $DOMAIN MX +short)
    DKIM=$(dig @$DNS_SERVER default._domainkey.$DOMAIN TXT | grep -i "v=DKIM" | sed 's/^/    /')
    if [ -z "${G_SUITE}" ]; then
        if [[ $MX = *"google.com"* ]]; then
            G_SUITE='true'
        else
            G_SUITE='false'
        fi
    fi
    echo "$DKIM"
    if [ $G_SUITE == 'true' ]; then
        echo "${HIL2}GOOGLE WORKSPACE MX records detected on domain ${FDOMAIN}.${NC}"
        echo "${HEAD}GOOGLE WORKSPACE DKIM${NC} for ${FDOMAIN}:"
        GDKIM=$(dig @$DNS_SERVER google._domainkey.$DOMAIN TXT | grep -i "v=DKIM" | sed 's/^/    /')
        if [[ -z "${GDKIM}" ]]; then
            echo "${ALERT}No DKIM entry found for google._domainkey.$DOMAIN found!${NC}"
            echo "${HEAD}Customer needs to obtain the DKIM key to be used from Google.${NC}"
            echo "https://support.google.com/a/answer/174124?hl=en"
        else
            echo "$GDKIM"
        fi
    fi
}

dmarc_check() {
    # See if there is a DMARC record for the domain.
    echo "${HEAD}DMARC${NC} for ${FDOMAIN}:"
    dig @$DNS_SERVER _dmarc.$DOMAIN TXT | grep 'v=' | sed 's/^/    /'
}

set_dns() {
    # We have to do this so many times, just make a function for it.
    # It also allows for the loop to work more effectively.
    # Note: $1 in this case is the server passed to this function!
    DNS_SERVER=$1
    REV=$(dig -x $DNS_SERVER +short | awk '{ print $1 }' ORS=' ' | awk '{ print $1 }')
    if [ -z "${REV}" ]; then
        FDNS_SERVER=${1}
    else
        FDNS_SERVER=${REV}
    fi
}

dig_once() {
    # We run this dig command so many times why not just run it 
    # once and assign it to a var?
    DIG_SHORT=$(dig @$DNS_SERVER $DOMAIN +short)
}

prop_check() {
    # This is the DNS propagation check for the given domain. We'll check all
    # of the DNS servers we know, including some not used unless this is run.
    clear # Clear the screen before we perform this test.
    echo -e "${HEAD}***** WORLDWIDE DNS PROPAGATION CHECK FOR:${NC} $FDOMAIN ${HEAD}*****${NC}"

    DNS_COUNT=0
    MATCH=0
    DNS_LIST=($IMH $HUB $RES $GOOG $CF $L3 $QUAD $Q9BL $OPEN $NIC $VERI $COMO)
    DNS_LIST+=($NORT $W1 $W2 $W3 $W4 $W5 $W6 $W7 $W8 $W9 $W10 $W11 $W12 $W13)
    DNS_LIST+=($W14 $W15 $W16)
    for DNS in "${DNS_LIST[@]}"; do
        DNS_COUNT=$((DNS_COUNT+1))
        set_dns $DNS

        # If there is not a PTR for the DNS record, display the IPv4.
        if [ -z "${FDNS_SERVER}" ]; then
            SERVER=${HIL1}${DNS}${NC}
        else # Display the PTR as given to us.
            SERVER=$FDNS_SERVER
        fi

        if [ "$DNS_COUNT" = 1 ]; then
            # First, we want to query the authoritative name server for the
            # given domain.  This way we can confirm if the SOA from other
            # servers match the authoritative.
            AUTH_NS=$(dig +noall +answer +authority +short $DOMAIN NS | sort -n | awk '{ print $1 }' ORS=' ' | awk '{ print $1 }')
            AUTH=$(dig @$AUTH_NS $DOMAIN SOA +short | awk '{ print $3 }')

            # Most domains have at least two name servers. However, to prevent
            # the response from being too slow, we'll limit the check to just
            # two servers.
            if [ -z "${AUTH}" ]; then
                echo "${ALERT}--ERROR--${NC}"
                echo "Unable to obtain a valid SOA from the first authoritative name server."
                echo -e "    Trying next available name server...\n"

                AUTH_NS=$(dig +noall +answer +authority +short $DOMAIN NS | sort -n | awk '{ print $1 }' ORS=' ' | awk '{ print $2 }')
                AUTH=$(dig @$AUTH_NS $DOMAIN SOA +short | awk '{ print $3 }')

                #AUTH_NS=$(whois -d $DOMAIN | grep -i 'Name Server:' | awk '{print $3}' | awk 'NR!=1{print $1}')
                #AUTH=$(dig @$AUTH_NS $DOMAIN SOA +short | awk '{ print $3 }')

                if [ -z "${AUTH}" ]; then
                    echo "${ALERT}--ERROR--${NC}"
                    echo "Unable to obtain a valid SOA from the second authoritative name server."
                    echo -e "\n${ALERT}***** QUIT *****${NC}"
                    echo "Unable to obtain a valid SOA from an authoritative name server ${AUTH_NS}."
                    echo "Since these are the reported masters, we have nothing to compare other SOA records to."
                    exit 1
                fi
            else
                # We have a valid result out of the gate. Use this.
                echo "${INFO}Authoritative NS (${AUTH_NS}) SOA Serial: ${AUTH}${NC}"
                RESULT=${AUTH}
            fi
        else
            # We need the results of the query so that we can display an actual
            # timeout message since 'dig' doesn't display one for us. Also
            # reports if nothing is returned.
            RESULT=$(dig @$DNS $DOMAIN SOA +short | awk '{ print $3 }')
        fi

        # If the result is empty, display a notice with the IP address.
        # Due to potential error responses, omit any words that show up.
        RE='^[0-9]+$'
        if ! [[ $RESULT =~ $RE ]]; then
            if [ -z "${RESULT}" ] || [ "$RESULT" = '' ]; then
                SOA="No response from server (IP: ${DNS})"
            else
                SOA="Invalid response from server (IP: ${DNS})"
            fi
        else
            SOA="$RESULT"
        fi

        # Compare the two and increment if they match.
        if [ "$SOA" = "$AUTH" ]; then
            MATCH=$((MATCH+1))
            ANSWER=${COOL}${SOA}${NC}
        else
            ANSWER=${ALERT}${SOA}${NC}
        fi

        # Print the results. Remember, FDNS_SERVER is already formatted.
        # The answer is on a new line so that one can visually scroll down the
        # list of SOAs returned to visually compare.
        echo "DNS: ${SERVER}:"
        echo "    $ANSWER"
    done

    # Print the match results.
    echo "${HEAD}**** MATCH RESULTS: $MATCH OF ${DNS_COUNT} ****${NC}"
    echo -e ""
}

caa_check() {
    echo "${HEAD}CAA${NC} FOR ${FDOMAIN}:"
    dig @$DNS_SERVER $DOMAIN CAA +short | sed 's/^/    /'
}

ssl_data() {
    echo "${HEAD}Current SSL Data${NC} for ${FDOMAIN}:"
    # Credit: Paul S.
    echo | openssl s_client -servername "$DOMAIN" -connect "$DOMAIN":443 2>/dev/null | openssl x509 -noout -text | awk '/Issuer:/,/Subject:/; /DNS:/' | sed -e 's/^[ \t]*//' | sed 's/^/    /'
}

# Check for updates to Newcall
version_compare() {
    # This will return the following numbers for the two arguments passed.
    # 0 if $1 = $2
    # 1 if $1 > $2
    # 2 if $1 < $2

    if [[ $1 == $2 ]]; then
        return 0
    fi

    local IFS=.
    local i ver1=($1) ver2=($2)
    # Fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done

    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]]; then
            # Fill empty fields in ver2 with zeros
            ver2[i]=0
        fi

        if ((10#${ver1[i]} > 10#${ver2[i]})); then
            return 1
        fi

        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 2
        fi
    done

    return 0
}

update_check() {
    # Perform update check.
    # Bug. Credit Nick L. -- The JS /tmp dir doesn't allow the file to be read by others. Correcting to make a folder under /tmp owned by the user to then
    # put the file into that folder, thus removing the permission denied messages.
    if [[ ! -e $TEMP_DIR ]]; then
        mkdir -p ${TEMP_DIR}
    elif [[ ! -d $TEMP_DIR ]]; then
        echo "The temporary directory is a file, not a directory. Failed update check."
        sleep 3
    fi
    
    # Only download the file every 6 hours to reduce the number of times this is done.
    if [[ ! -e $TEMP_DIR/newcall ]]; then
        wget -O ${TEMP_DIR}/newcall -q https://raw.githubusercontent.com/Hummdis/newcall/master/newcall
    elif test `find ${TEMP_DIR}/newcall -mmin +360`; then
        rm -f ${TEMP_DIR}/newcall
        wget -O ${TEMP_DIR}/newcall -q https://raw.githubusercontent.com/Hummdis/newcall/master/newcall
    fi
    # Use the existing file to check.
    NEW_VER=$(cat ${TEMP_DIR}/newcall | grep -m 1 "VERSION=" | cut -d = -f 2 | sed -e 's/^"//' -e 's/"$//')
    version_compare ${NEW_VER} ${VERSION}
    case $? in
        0)  # No update available. Do nothing.
            ;;
        1)  # Report a new version
            echo "${HIL2}Update Check${NC} - Newcall ${HEAD}v${NEW_VER} available!${NC}"
            sleep 2
            ;;
        2)  # The public version is older than the current version.
            echo "${HIL2}Update Check${NC} - Running Newcall version is ${VERSION}, but published version is ${NEW_VER}. Is this a pre-release?"
            ;;
        *)  # All other values are invalid. Report, but don't cause the program to abort.
            echo "${HIL2}Update Check${NC} - Newcall Update Check returned an invalid code ($?)."
            ;;
    esac
}

update() {
    echo "Performing Newcall update...."
    wget -O ${RUN_PATH}/newcall https://raw.githubusercontent.com/Hummdis/newcall/master/newcall
    chmod +x ${RUN_PATH}/newcall
    echo "Update Complete."
    exit 0
}

redirect_check() {
    echo "${HEAD}Starting Domain Redirect Check${NC}"
    curl -sA "IMH Newcall Redirect Check" -I http://${DOMAIN} | egrep "HTTP|Location"
}

## End FUNCTIONS

# Main portion. Process the arguments and perform checks.
# Make sure we got a domain provided. If not, display usage and exit.
case $1 in
    '' | help | -h | --help) # Nothing | -h | --help passed.
        usage
        exit 1
        ;;
    update) # Run Update.
        update
        ;;
    version | -v | --version) # Display version information
        echo "Newcall DNS Lookup Tool - v${VERSION}"
        echo "Created by Jeffrey Shepherd (https://hummdis.com).
This work is licensed under the Creative Commons Attribution-ShareAlike  
4.0 International License. To view a copy of this license,
visit http://creativecommons.org/licenses/by-sa/4.0/."
        exit 0
        ;;
    *) # We have something! Then set the variables.
        # We're trusting the user gave a valid TLD. If not, the results will
        # show that it's invalid.
        USER_DOMAIN=$1
        # From Shehab A. -- Allow the copy-and-paste of a domain from a browser by
        # stripping the 'http://' and 'https://' from the domain and the trailing /.
        DOMAIN=$(echo "$USER_DOMAIN" | sed -e 's|^[^/]*//||' -e 's|/.*$||' | tr [:upper:] [:lower:])
        FDOMAIN=${HIL1}${DOMAIN}${NC}
        ;;
esac

# Set default DNS server
set_default_dns

# If no argument is passed with the domain, we have to set $2 to something
# for the loop to work correctly and allow stacking of commands.
if [ -z "${2}" ]; then
    # Leave $1 alone! Just set the $2 variable to the default NS
    set -- "$1" "$DEFDNS"
fi

# Always perform update check.
update_check
sleep 2

# Loop through each of the passed arguments starting at the second one.
for i in "${@:2}"
do
    case $i in
        int | imh) # InMotion
            # See note in DNS variables to know why this can't be default.
            set_dns $IMH
            dig_once
            default_search
            ;;
        res) # InMotion Reseller
            # See note in DNS variables to know why this can't be default.
            set_dns $RES
            dig_once
            default_search
            ;;
        hub) # Web Hosting Hub
            # See note in DNS variables to know why this can't be default.
            set_dns $HUB
            dig_once
            default_search
            ;;
        goog) # Google
            set_dns $GOOG
            dig_once
            default_search
            ;;
        open) # OpenDNS
            set_dns $OPEN
            dig_once
            default_search
            ;;
        quad) # Quad9
            set_dns $QUAD
            dig_once
            default_search
            ;;
        q9bl) # Quad9 Non-Secure (unfiltered)
            set_dns $Q9BL
            dig_once
            default_search
            ;;
        l3) # Level3
            set_dns $L3
            dig_once
            default_search
            ;;
        nic) # OpenNIC
            set_dns $NIC
            dig_once
            default_search
            ;;
        cf | '') # Cloudfare
            set_dns $CF
            dig_once
            default_search
            ;;
        veri) # Verisign
            set_dns $VERI
            dig_once
            default_search
            ;;
        nort) # Norton ConnectSafe
            set_dns $NORT
            dig_once
            default_search
            ;;
        como) # Comodo Secure DNS
            set_dns $COMO
            dig_once
            default_search
            ;;
        ssl) # Only run checks that we care about when installing SSLs.
            # This is NOT stackable. Only run these options.
            set_dns $DEFDNS
            dig_once
            set_whois
            ip_search
            ns_check
            ptr_search
            arin_search
            caa_check
            ssl_data
            exit 0
            ;;
        spam) # Check NS, PTR, MX, SPF and DMARC to find causes of spam.
            # This is NOT stackable. Only run these options.
            set_dns $DEFDNS
            dig_once
            set_whois
            ns_check
            ptr_search
            mx_search
            spf_check
            dmarc_check
            dkim_check
            exit 0
            ;;
        whoisfull) # Print full WHOIS information.
            whois_full
            ;;
        # Options from here down can be stacked.
        prop) # Check world DNS propagation.
            prop_check
            ;;
        arin) # Perform an ARIN IP check.
            set_dns $DEFDNS
            dig_once
            arin_search
            ;;
        mx) # Run the MX lookup only.
            set_dns $DEFDNS
            mx_search
            ;;
        ns) # Run a Name Server check only.
            ns_check
            ;;
        whois) # Get more WHOIS information.
            whois_expanded
            ;;
        spf) # Show only SPF records.
            set_dns $DEFDNS
            spf_check
            ;;
        dmarc) # Check DMARC records.
            set_dns $DEFDNS
            dmarc_check
            ;;
        dkim) # Check DKIM records.
            set_dns $DEFDNS
            dkim_check
            ;;
        a) # Check the "A" records only.
            set_dns $DEFDNS
            ip_search
            ;;
        ptr) # Print the PTR results.
            set_dns $DEFDNS
        dig_once
            ptr_search
            ;;
        caa) # Run a CAA check.
            set_dns $DEFDNS
            caa_check
            ;;
        reg | isus | tucows) # Perform Registrar check only
            set_dns $DEFDNS
            set_whois
            reg_check
            ;;
        redirect) # Perform a redirect check.
            redirect_check
            ;;
        *) # Use the IP passed as the 2nd arg. Validate IP, else show usage.
            if [[ "$2" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
                set_dns $2
                dig_once
                default_search
            else
                echo "${ALERT}Invalid IPv4 address provided.${NC}. No IPv6 support at this time."
                usage
                exit 2
            fi
            ;;
    esac
done

# All done!

exit 0
